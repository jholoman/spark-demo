/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cloudera.se.spark.demo.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UpdatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UpdatedEvent\",\"namespace\":\"com.cloudera.se.spark.demo.avro\",\"fields\":[{\"name\":\"header1\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"avro.java.string\":\"String\"},{\"name\":\"header2\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"avro.java.string\":\"String\"},{\"name\":\"header3\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"avro.java.string\":\"String\"},{\"name\":\"header4\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"avro.java.string\":\"String\"},{\"name\":\"body\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"avro.java.string\":\"String\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String header1;
  @Deprecated public java.lang.String header2;
  @Deprecated public java.lang.String header3;
  @Deprecated public java.lang.String header4;
  @Deprecated public java.lang.String body;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public UpdatedEvent() {}

  /**
   * All-args constructor.
   */
  public UpdatedEvent(java.lang.String header1, java.lang.String header2, java.lang.String header3, java.lang.String header4, java.lang.String body) {
    this.header1 = header1;
    this.header2 = header2;
    this.header3 = header3;
    this.header4 = header4;
    this.body = body;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header1;
    case 1: return header2;
    case 2: return header3;
    case 3: return header4;
    case 4: return body;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header1 = (java.lang.String)value$; break;
    case 1: header2 = (java.lang.String)value$; break;
    case 2: header3 = (java.lang.String)value$; break;
    case 3: header4 = (java.lang.String)value$; break;
    case 4: body = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'header1' field.
   */
  public java.lang.String getHeader1() {
    return header1;
  }

  /**
   * Sets the value of the 'header1' field.
   * @param value the value to set.
   */
  public void setHeader1(java.lang.String value) {
    this.header1 = value;
  }

  /**
   * Gets the value of the 'header2' field.
   */
  public java.lang.String getHeader2() {
    return header2;
  }

  /**
   * Sets the value of the 'header2' field.
   * @param value the value to set.
   */
  public void setHeader2(java.lang.String value) {
    this.header2 = value;
  }

  /**
   * Gets the value of the 'header3' field.
   */
  public java.lang.String getHeader3() {
    return header3;
  }

  /**
   * Sets the value of the 'header3' field.
   * @param value the value to set.
   */
  public void setHeader3(java.lang.String value) {
    this.header3 = value;
  }

  /**
   * Gets the value of the 'header4' field.
   */
  public java.lang.String getHeader4() {
    return header4;
  }

  /**
   * Sets the value of the 'header4' field.
   * @param value the value to set.
   */
  public void setHeader4(java.lang.String value) {
    this.header4 = value;
  }

  /**
   * Gets the value of the 'body' field.
   */
  public java.lang.String getBody() {
    return body;
  }

  /**
   * Sets the value of the 'body' field.
   * @param value the value to set.
   */
  public void setBody(java.lang.String value) {
    this.body = value;
  }

  /** Creates a new UpdatedEvent RecordBuilder */
  public static com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder newBuilder() {
    return new com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder();
  }
  
  /** Creates a new UpdatedEvent RecordBuilder by copying an existing Builder */
  public static com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder newBuilder(com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder other) {
    return new com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder(other);
  }
  
  /** Creates a new UpdatedEvent RecordBuilder by copying an existing UpdatedEvent instance */
  public static com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder newBuilder(com.cloudera.se.spark.demo.avro.UpdatedEvent other) {
    return new com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder(other);
  }
  
  /**
   * RecordBuilder for UpdatedEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UpdatedEvent>
    implements org.apache.avro.data.RecordBuilder<UpdatedEvent> {

    private java.lang.String header1;
    private java.lang.String header2;
    private java.lang.String header3;
    private java.lang.String header4;
    private java.lang.String body;

    /** Creates a new Builder */
    private Builder() {
      super(com.cloudera.se.spark.demo.avro.UpdatedEvent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header1)) {
        this.header1 = data().deepCopy(fields()[0].schema(), other.header1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.header2)) {
        this.header2 = data().deepCopy(fields()[1].schema(), other.header2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.header3)) {
        this.header3 = data().deepCopy(fields()[2].schema(), other.header3);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.header4)) {
        this.header4 = data().deepCopy(fields()[3].schema(), other.header4);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.body)) {
        this.body = data().deepCopy(fields()[4].schema(), other.body);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing UpdatedEvent instance */
    private Builder(com.cloudera.se.spark.demo.avro.UpdatedEvent other) {
            super(com.cloudera.se.spark.demo.avro.UpdatedEvent.SCHEMA$);
      if (isValidValue(fields()[0], other.header1)) {
        this.header1 = data().deepCopy(fields()[0].schema(), other.header1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.header2)) {
        this.header2 = data().deepCopy(fields()[1].schema(), other.header2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.header3)) {
        this.header3 = data().deepCopy(fields()[2].schema(), other.header3);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.header4)) {
        this.header4 = data().deepCopy(fields()[3].schema(), other.header4);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.body)) {
        this.body = data().deepCopy(fields()[4].schema(), other.body);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'header1' field */
    public java.lang.String getHeader1() {
      return header1;
    }
    
    /** Sets the value of the 'header1' field */
    public com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder setHeader1(java.lang.String value) {
      validate(fields()[0], value);
      this.header1 = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'header1' field has been set */
    public boolean hasHeader1() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'header1' field */
    public com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder clearHeader1() {
      header1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'header2' field */
    public java.lang.String getHeader2() {
      return header2;
    }
    
    /** Sets the value of the 'header2' field */
    public com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder setHeader2(java.lang.String value) {
      validate(fields()[1], value);
      this.header2 = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'header2' field has been set */
    public boolean hasHeader2() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'header2' field */
    public com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder clearHeader2() {
      header2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'header3' field */
    public java.lang.String getHeader3() {
      return header3;
    }
    
    /** Sets the value of the 'header3' field */
    public com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder setHeader3(java.lang.String value) {
      validate(fields()[2], value);
      this.header3 = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'header3' field has been set */
    public boolean hasHeader3() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'header3' field */
    public com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder clearHeader3() {
      header3 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'header4' field */
    public java.lang.String getHeader4() {
      return header4;
    }
    
    /** Sets the value of the 'header4' field */
    public com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder setHeader4(java.lang.String value) {
      validate(fields()[3], value);
      this.header4 = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'header4' field has been set */
    public boolean hasHeader4() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'header4' field */
    public com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder clearHeader4() {
      header4 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'body' field */
    public java.lang.String getBody() {
      return body;
    }
    
    /** Sets the value of the 'body' field */
    public com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder setBody(java.lang.String value) {
      validate(fields()[4], value);
      this.body = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'body' field has been set */
    public boolean hasBody() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'body' field */
    public com.cloudera.se.spark.demo.avro.UpdatedEvent.Builder clearBody() {
      body = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public UpdatedEvent build() {
      try {
        UpdatedEvent record = new UpdatedEvent();
        record.header1 = fieldSetFlags()[0] ? this.header1 : (java.lang.String) defaultValue(fields()[0]);
        record.header2 = fieldSetFlags()[1] ? this.header2 : (java.lang.String) defaultValue(fields()[1]);
        record.header3 = fieldSetFlags()[2] ? this.header3 : (java.lang.String) defaultValue(fields()[2]);
        record.header4 = fieldSetFlags()[3] ? this.header4 : (java.lang.String) defaultValue(fields()[3]);
        record.body = fieldSetFlags()[4] ? this.body : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
